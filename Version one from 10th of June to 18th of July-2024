import os
import time
from tkinter import *
from tkinter import messagebox

# Quit the main window
def quit_program():
    Main_win.destroy()

# Print details of all items in a new window
def print_item_details():
    global detail_window
    try:
        detail_window.destroy()
    except:
        pass

    detail_window = Toplevel(Main_win)
    detail_window.title("All the items hired Details")
    detail_window.iconphoto(False, icon)
    detail_window.geometry("600x600")
    detail_window.configure(bg="pink")
    name_count = 0
    Label(detail_window, font=("Helvetica", 12, "bold"), text="Name", fg="white", bg="black", relief="sunken", bd=5).grid(column=1, row=0, padx=5, pady=5)
    Label(detail_window, font=("Helvetica", 12, "bold"), text="Items Hired Name", fg="white", bg="black", relief="ridge", bd=5).grid(column=2, row=0, padx=5, pady=5)
    Label(detail_window, font=("Helvetica", 12, "bold"), text="Total number of items hired", fg="white", bg="black", relief="groove", bd=5).grid(column=3, row=0, padx=5, pady=5)
    Label(detail_window, font=("Helvetica", 12, "bold"), text="Receipt Number", fg="white", bg="black", relief="raised", bd=5).grid(column=4, row=0, padx=5, pady=5)


    # Add item details to rows
    for name_count, item in enumerate(item_details):
       
        Label(detail_window, text=item[0], relief="sunken", font=("Helvetica", 10), fg="blue", bg="white").grid(column=1, row=name_count+1, padx=5, pady=5)
        Label(detail_window, text=item[1], relief="sunken", font=("Helvetica", 10), fg="blue", bg="white").grid(column=2, row=name_count+1, padx=5, pady=5)
        Label(detail_window, text=item[2], relief="sunken", font=("Helvetica", 10), fg="blue", bg="white").grid(column=3, row=name_count+1, padx=5, pady=5)
        Label(detail_window, text=item[3], relief="sunken", font=("Helvetica", 10), fg="blue", bg="white").grid(column=4, row=name_count+1, padx=5, pady=5)
    counters['name_count'] = name_count

# Show error message
def show_wrong_message(message):
    messagebox.showerror("Error", message)

# Validate user input
def check_inputs():
    input_check = 0
    if len(entry_name.get()) == 0 or not entry_name.get().isalpha():
        show_wrong_message("Name is required and must contain only letters")
        input_check = 1
    if len(entry_items_name.get()) == 0 or not entry_items_name.get().isalpha():
        show_wrong_message("Items Hired Name is required and must contain only letters")
        input_check = 1
    if entry_items_number_nehired.get().isdigit():
        if int(entry_items_number_nehired.get()) <= 0 or int(entry_items_number_nehired.get()) > 500:
            show_wrong_message("Total number of items hired must be between 1 and 500")
            input_check = 1
    else:
        show_wrong_message("Total number of items hired is required and must be a positive number")
        input_check = 1

    if input_check == 0:
        append_item()
        receipt_number = item_details[-1][3]
        messagebox.showinfo("Receipt", f"Items hired successfully! Your receipt number is {receipt_number}")

# Generate a receipt number
def give_receipt_no():
    counters['receipt_counter'] += 1
    return f"{time.strftime('%d-%m-%Y')}-{counters['receipt_counter']:04d}"

# Append new item details
def append_item():
    receipt_number = give_receipt_no()
    item_details.append([entry_name.get(), entry_items_name.get(), entry_items_number_nehired.get(), receipt_number])
    save_receit_in_file(receipt_number)
    entry_name.delete(0, 'end')
    entry_items_name.delete(0, 'end')
    entry_items_number_nehired.delete(0, 'end')
    counters['total_entries'] += 1
# Save receipt to a file
def save_receit_in_file(receipt_number):
    if not os.path.exists('receipts'):
        os.makedirs('receipts')
    with open(f'receipts/{receipt_number}.txt', 'w') as file:
        file.write(f"Name: {entry_name.get()}\n")
        file.write(f"Items Hired Name: {entry_items_name.get()}\n")
        file.write(f"Total number of items hired: {entry_items_number_nehired.get()}\n")
        file.write(f"Receipt Number: {receipt_number}\n")

# Delete an item by receipt number
def delete_by_receipt():
    receipt_number = delete_receipt_entry.get()
    for item in item_details:
        if item[3] == receipt_number:
            item_details.remove(item)
            counters['total_entries'] -= 1
            delete_receipt_file(receipt_number)
            delete_receipt_entry.delete(0, 'end')
            print_item_details()
            return
    show_wrong_message("Receipt number not found")

# Delete the receipt file
def delete_receipt_file(receipt_number):
    file_path = f'receipts/{receipt_number}.txt'
    if os.path.exists(file_path):
        os.remove(file_path)

# Show history of a receipt number
def History():
    history_window = Toplevel(Main_win)
    history_window.title("Show History")
    history_window.iconphoto(False, icon)
    history_window.geometry("500x300")

    Label(history_window, text="Receipt Number", bg="lightblue").grid(column=0, row=0, padx=20, pady=20, sticky=E)
    global entry_receipt_search
    entry_receipt_search = Entry(history_window)
    entry_receipt_search.grid(column=1, row=0)
    Button(history_window, text="Search", command=search_receipt, width=15).grid(column=1, row=1, padx=20, pady=20)

# Search for a receipt
def search_receipt():
    receipt_number = entry_receipt_search.get()
    file_path = f'receipts/{receipt_number}.txt'
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            history_content = file.read()
        show_content(history_content)
    else:
        show_wrong_message("Receipt not found")

# Display receipt content
def show_content(content):
    content_window = Toplevel(Main_win)
    content_window.title("Receipt Content")
    content_window.iconphoto(False, icon)
    content_window.geometry("500x300")

    text = Text(content_window)
    text.insert(1.0, content)
    text.config(state=DISABLED)
    text.pack(expand=1, fill=BOTH)

# Setup main buttons
def setup_main_buttons():
    Button(Main_win, text="Append Details", command=appenditems_page, width=15).grid(column=22, row=20, padx=20, pady=20)
    Button(Main_win, text="Delete Details", command=return_page, width=15).grid(column=22, row=22, padx=20, pady=20)
    Button(Main_win, text="Print Details", command=print_item_details, width=15).grid(column=22, row=24, padx=20, pady=20)
    Button(Main_win, text="Show History", command=History, width=15).grid(column=22, row=26, padx=20, pady=20)
    Button(Main_win, text="Quit", command=quit_program, width=15).grid(column=26, row=30, padx=20, pady=20)

# Open add details page
def appenditems_page():
    add_details_window = Toplevel(Main_win)
    add_details_window.title("John's Item Hire Program")
    add_details_window.iconphoto(False, icon)
    add_details_window.geometry("500x400")

 # Load and set background image
    bg_image = PhotoImage(file="D:/PYTHON/我的电脑PYTHON/output-onlinepngtools.png")
    bg_label = Label(add_details_window, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)

    Label(add_details_window, text="Name", bg="lightblue").grid(column=0, row=0, padx=20, pady=20, sticky=E)
    Label(add_details_window, text="Items Hired Name", bg="lightblue").grid(column=0, row=1, padx=20, pady=12, sticky=E)
    Label(add_details_window, text="Total number of items hired", bg="lightblue").grid(column=0, row=2, padx=20, pady=12, sticky=E)

    global entry_name, entry_items_name, entry_items_number_nehired
    entry_name = Entry(add_details_window)
    entry_name.grid(column=1, row=0)
    entry_items_name = Entry(add_details_window)
    entry_items_name.grid(column=1, row=1)
    entry_items_number_nehired = Entry(add_details_window)
    entry_items_number_nehired.grid(column=1, row=2)

    Button(add_details_window, text="Save", command=check_inputs, width=15).grid(column=1, row=3, padx=20, pady=20)

# Open delete page
def return_page():
    delete_details_window = Toplevel(Main_win)
    delete_details_window.title("Delete Details")
    delete_details_window.iconphoto(False, icon)
    delete_details_window.geometry("500x400")

    bg_image = PhotoImage(file="D:/PYTHON/我的电脑PYTHON/output-onlinepngtools.png")
    bg_label = Label(delete_details_window, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)

    Label(delete_details_window, text="Receipt Number", bg="lightblue").grid(column=0, row=0, padx=20, pady=20, sticky=E)

    global delete_receipt_entry
    delete_receipt_entry = Entry(delete_details_window)
    delete_receipt_entry.grid(column=1, row=0)

    Button(delete_details_window, text="Delete", command=delete_by_receipt, width=15).grid(column=1, row=1, padx=20, pady=20)

# Start the program running
def main():
    global Main_win, icon
    Main_win = Tk()
    Main_win.geometry("480x350")
    Main_win.title("John's Item Hire Program")

    icon_path = r"receipt.png"
    icon = PhotoImage(file=icon_path)
    Main_win.iconphoto(False, icon)

   # Load the background image
    bg_image = PhotoImage(file=r"output-onlinepngtools.png")
    bg_label = Label(Main_win, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)
   
    setup_main_buttons()

    Main_win.mainloop()

# Initialize counters and item details list
counters = {'total_entries': 0, 'name_count': 0, 'receipt_counter': 0}
item_details = []

main()
